#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]

/* automatically generated by rust-bindgen */

pub const STBTT_MACSTYLE_DONTCARE: u32 = 0;
pub const STBTT_MACSTYLE_BOLD: u32 = 1;
pub const STBTT_MACSTYLE_ITALIC: u32 = 2;
pub const STBTT_MACSTYLE_UNDERSCORE: u32 = 4;
pub const STBTT_MACSTYLE_NONE: u32 = 8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt__buf {
    pub data: *mut ::std::os::raw::c_uchar,
    pub cursor: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_stbtt__buf() {
    assert_eq!(
        ::std::mem::size_of::<stbtt__buf>(),
        16usize,
        concat!("Size of: ", stringify!(stbtt__buf))
    );
    assert_eq!(
        ::std::mem::align_of::<stbtt__buf>(),
        8usize,
        concat!("Alignment of ", stringify!(stbtt__buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt__buf>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt__buf),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt__buf>())).cursor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt__buf),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt__buf>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt__buf),
            "::",
            stringify!(size)
        )
    );
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_bakedchar {
    pub x0: ::std::os::raw::c_ushort,
    pub y0: ::std::os::raw::c_ushort,
    pub x1: ::std::os::raw::c_ushort,
    pub y1: ::std::os::raw::c_ushort,
    pub xoff: f32,
    pub yoff: f32,
    pub xadvance: f32,
}
#[test]
fn bindgen_test_layout_stbtt_bakedchar() {
    assert_eq!(
        ::std::mem::size_of::<stbtt_bakedchar>(),
        20usize,
        concat!("Size of: ", stringify!(stbtt_bakedchar))
    );
    assert_eq!(
        ::std::mem::align_of::<stbtt_bakedchar>(),
        4usize,
        concat!("Alignment of ", stringify!(stbtt_bakedchar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_bakedchar>())).x0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_bakedchar),
            "::",
            stringify!(x0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_bakedchar>())).y0 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_bakedchar),
            "::",
            stringify!(y0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_bakedchar>())).x1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_bakedchar),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_bakedchar>())).y1 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_bakedchar),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_bakedchar>())).xoff as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_bakedchar),
            "::",
            stringify!(xoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_bakedchar>())).yoff as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_bakedchar),
            "::",
            stringify!(yoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_bakedchar>())).xadvance as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_bakedchar),
            "::",
            stringify!(xadvance)
        )
    );
}
extern "C" {
    pub fn stbtt_BakeFontBitmap(
        data: *const ::std::os::raw::c_uchar,
        offset: ::std::os::raw::c_int,
        pixel_height: f32,
        pixels: *mut ::std::os::raw::c_uchar,
        pw: ::std::os::raw::c_int,
        ph: ::std::os::raw::c_int,
        first_char: ::std::os::raw::c_int,
        num_chars: ::std::os::raw::c_int,
        chardata: *mut stbtt_bakedchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_aligned_quad {
    pub x0: f32,
    pub y0: f32,
    pub s0: f32,
    pub t0: f32,
    pub x1: f32,
    pub y1: f32,
    pub s1: f32,
    pub t1: f32,
}
#[test]
fn bindgen_test_layout_stbtt_aligned_quad() {
    assert_eq!(
        ::std::mem::size_of::<stbtt_aligned_quad>(),
        32usize,
        concat!("Size of: ", stringify!(stbtt_aligned_quad))
    );
    assert_eq!(
        ::std::mem::align_of::<stbtt_aligned_quad>(),
        4usize,
        concat!("Alignment of ", stringify!(stbtt_aligned_quad))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_aligned_quad>())).x0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_aligned_quad),
            "::",
            stringify!(x0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_aligned_quad>())).y0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_aligned_quad),
            "::",
            stringify!(y0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_aligned_quad>())).s0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_aligned_quad),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_aligned_quad>())).t0 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_aligned_quad),
            "::",
            stringify!(t0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_aligned_quad>())).x1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_aligned_quad),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_aligned_quad>())).y1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_aligned_quad),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_aligned_quad>())).s1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_aligned_quad),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_aligned_quad>())).t1 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_aligned_quad),
            "::",
            stringify!(t1)
        )
    );
}
extern "C" {
    pub fn stbtt_GetBakedQuad(
        chardata: *const stbtt_bakedchar,
        pw: ::std::os::raw::c_int,
        ph: ::std::os::raw::c_int,
        char_index: ::std::os::raw::c_int,
        xpos: *mut f32,
        ypos: *mut f32,
        q: *mut stbtt_aligned_quad,
        opengl_fillrule: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetScaledFontVMetrics(
        fontdata: *const ::std::os::raw::c_uchar,
        index: ::std::os::raw::c_int,
        size: f32,
        ascent: *mut f32,
        descent: *mut f32,
        lineGap: *mut f32,
    );
}
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_packedchar {
    pub x0: ::std::os::raw::c_ushort,
    pub y0: ::std::os::raw::c_ushort,
    pub x1: ::std::os::raw::c_ushort,
    pub y1: ::std::os::raw::c_ushort,
    pub xoff: f32,
    pub yoff: f32,
    pub xadvance: f32,
    pub xoff2: f32,
    pub yoff2: f32,
}
#[test]
fn bindgen_test_layout_stbtt_packedchar() {
    assert_eq!(
        ::std::mem::size_of::<stbtt_packedchar>(),
        28usize,
        concat!("Size of: ", stringify!(stbtt_packedchar))
    );
    assert_eq!(
        ::std::mem::align_of::<stbtt_packedchar>(),
        4usize,
        concat!("Alignment of ", stringify!(stbtt_packedchar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_packedchar>())).x0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_packedchar),
            "::",
            stringify!(x0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_packedchar>())).y0 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_packedchar),
            "::",
            stringify!(y0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_packedchar>())).x1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_packedchar),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_packedchar>())).y1 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_packedchar),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_packedchar>())).xoff as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_packedchar),
            "::",
            stringify!(xoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_packedchar>())).yoff as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_packedchar),
            "::",
            stringify!(yoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_packedchar>())).xadvance as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_packedchar),
            "::",
            stringify!(xadvance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_packedchar>())).xoff2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_packedchar),
            "::",
            stringify!(xoff2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_packedchar>())).yoff2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_packedchar),
            "::",
            stringify!(yoff2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbrp_rect {
    _unused: [u8; 0],
}
extern "C" {
    pub fn stbtt_PackBegin(
        spc: *mut stbtt_pack_context,
        pixels: *mut ::std::os::raw::c_uchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        stride_in_bytes: ::std::os::raw::c_int,
        padding: ::std::os::raw::c_int,
        alloc_context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_PackEnd(spc: *mut stbtt_pack_context);
}
extern "C" {
    pub fn stbtt_PackFontRange(
        spc: *mut stbtt_pack_context,
        fontdata: *const ::std::os::raw::c_uchar,
        font_index: ::std::os::raw::c_int,
        font_size: f32,
        first_unicode_char_in_range: ::std::os::raw::c_int,
        num_chars_in_range: ::std::os::raw::c_int,
        chardata_for_range: *mut stbtt_packedchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_pack_range {
    pub font_size: f32,
    pub first_unicode_codepoint_in_range: ::std::os::raw::c_int,
    pub array_of_unicode_codepoints: *mut ::std::os::raw::c_int,
    pub num_chars: ::std::os::raw::c_int,
    pub chardata_for_range: *mut stbtt_packedchar,
    pub h_oversample: ::std::os::raw::c_uchar,
    pub v_oversample: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_stbtt_pack_range() {
    assert_eq!(
        ::std::mem::size_of::<stbtt_pack_range>(),
        40usize,
        concat!("Size of: ", stringify!(stbtt_pack_range))
    );
    assert_eq!(
        ::std::mem::align_of::<stbtt_pack_range>(),
        8usize,
        concat!("Alignment of ", stringify!(stbtt_pack_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_range>())).font_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_range),
            "::",
            stringify!(font_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stbtt_pack_range>())).first_unicode_codepoint_in_range
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_range),
            "::",
            stringify!(first_unicode_codepoint_in_range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stbtt_pack_range>())).array_of_unicode_codepoints as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_range),
            "::",
            stringify!(array_of_unicode_codepoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_range>())).num_chars as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_range),
            "::",
            stringify!(num_chars)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stbtt_pack_range>())).chardata_for_range as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_range),
            "::",
            stringify!(chardata_for_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_range>())).h_oversample as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_range),
            "::",
            stringify!(h_oversample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_range>())).v_oversample as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_range),
            "::",
            stringify!(v_oversample)
        )
    );
}
extern "C" {
    pub fn stbtt_PackFontRanges(
        spc: *mut stbtt_pack_context,
        fontdata: *const ::std::os::raw::c_uchar,
        font_index: ::std::os::raw::c_int,
        ranges: *mut stbtt_pack_range,
        num_ranges: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_PackSetOversampling(
        spc: *mut stbtt_pack_context,
        h_oversample: ::std::os::raw::c_uint,
        v_oversample: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn stbtt_PackSetSkipMissingCodepoints(
        spc: *mut stbtt_pack_context,
        skip: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetPackedQuad(
        chardata: *const stbtt_packedchar,
        pw: ::std::os::raw::c_int,
        ph: ::std::os::raw::c_int,
        char_index: ::std::os::raw::c_int,
        xpos: *mut f32,
        ypos: *mut f32,
        q: *mut stbtt_aligned_quad,
        align_to_integer: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_PackFontRangesGatherRects(
        spc: *mut stbtt_pack_context,
        info: *const stbtt_fontinfo,
        ranges: *mut stbtt_pack_range,
        num_ranges: ::std::os::raw::c_int,
        rects: *mut stbrp_rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_PackFontRangesPackRects(
        spc: *mut stbtt_pack_context,
        rects: *mut stbrp_rect,
        num_rects: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_PackFontRangesRenderIntoRects(
        spc: *mut stbtt_pack_context,
        info: *const stbtt_fontinfo,
        ranges: *mut stbtt_pack_range,
        num_ranges: ::std::os::raw::c_int,
        rects: *mut stbrp_rect,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_pack_context {
    pub user_allocator_context: *mut ::std::os::raw::c_void,
    pub pack_info: *mut ::std::os::raw::c_void,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub stride_in_bytes: ::std::os::raw::c_int,
    pub padding: ::std::os::raw::c_int,
    pub skip_missing: ::std::os::raw::c_int,
    pub h_oversample: ::std::os::raw::c_uint,
    pub v_oversample: ::std::os::raw::c_uint,
    pub pixels: *mut ::std::os::raw::c_uchar,
    pub nodes: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_stbtt_pack_context() {
    assert_eq!(
        ::std::mem::size_of::<stbtt_pack_context>(),
        64usize,
        concat!("Size of: ", stringify!(stbtt_pack_context))
    );
    assert_eq!(
        ::std::mem::align_of::<stbtt_pack_context>(),
        8usize,
        concat!("Alignment of ", stringify!(stbtt_pack_context))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stbtt_pack_context>())).user_allocator_context as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_context),
            "::",
            stringify!(user_allocator_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_context>())).pack_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_context),
            "::",
            stringify!(pack_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_context>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_context),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_context>())).height as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_context),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stbtt_pack_context>())).stride_in_bytes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_context),
            "::",
            stringify!(stride_in_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_context>())).padding as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_context),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_context>())).skip_missing as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_context),
            "::",
            stringify!(skip_missing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_context>())).h_oversample as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_context),
            "::",
            stringify!(h_oversample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_context>())).v_oversample as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_context),
            "::",
            stringify!(v_oversample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_context>())).pixels as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_context),
            "::",
            stringify!(pixels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_pack_context>())).nodes as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_pack_context),
            "::",
            stringify!(nodes)
        )
    );
}
extern "C" {
    #[doc = ""]
    pub fn stbtt_GetNumberOfFonts(data: *const ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetFontOffsetForIndex(
        data: *const ::std::os::raw::c_uchar,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_fontinfo {
    pub userdata: *mut ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_uchar,
    pub fontstart: ::std::os::raw::c_int,
    pub numGlyphs: ::std::os::raw::c_int,
    pub loca: ::std::os::raw::c_int,
    pub head: ::std::os::raw::c_int,
    pub glyf: ::std::os::raw::c_int,
    pub hhea: ::std::os::raw::c_int,
    pub hmtx: ::std::os::raw::c_int,
    pub kern: ::std::os::raw::c_int,
    pub gpos: ::std::os::raw::c_int,
    pub svg: ::std::os::raw::c_int,
    pub index_map: ::std::os::raw::c_int,
    pub indexToLocFormat: ::std::os::raw::c_int,
    pub cff: stbtt__buf,
    pub charstrings: stbtt__buf,
    pub gsubrs: stbtt__buf,
    pub subrs: stbtt__buf,
    pub fontdicts: stbtt__buf,
    pub fdselect: stbtt__buf,
}
#[test]
fn bindgen_test_layout_stbtt_fontinfo() {
    assert_eq!(
        ::std::mem::size_of::<stbtt_fontinfo>(),
        160usize,
        concat!("Size of: ", stringify!(stbtt_fontinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<stbtt_fontinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(stbtt_fontinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).userdata as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).fontstart as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(fontstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).numGlyphs as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(numGlyphs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).loca as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(loca)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).head as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).glyf as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(glyf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).hhea as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(hhea)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).hmtx as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(hmtx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).kern as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(kern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).gpos as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(gpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).svg as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(svg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).index_map as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(index_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).indexToLocFormat as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(indexToLocFormat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).cff as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(cff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).charstrings as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(charstrings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).gsubrs as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(gsubrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).subrs as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(subrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).fontdicts as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(fontdicts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_fontinfo>())).fdselect as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_fontinfo),
            "::",
            stringify!(fdselect)
        )
    );
}
extern "C" {
    pub fn stbtt_InitFont(
        info: *mut stbtt_fontinfo,
        data: *const ::std::os::raw::c_uchar,
        offset: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn stbtt_FindGlyphIndex(
        info: *const stbtt_fontinfo,
        unicode_codepoint: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn stbtt_ScaleForPixelHeight(info: *const stbtt_fontinfo, pixels: f32) -> f32;
}
extern "C" {
    pub fn stbtt_ScaleForMappingEmToPixels(info: *const stbtt_fontinfo, pixels: f32) -> f32;
}
extern "C" {
    pub fn stbtt_GetFontVMetrics(
        info: *const stbtt_fontinfo,
        ascent: *mut ::std::os::raw::c_int,
        descent: *mut ::std::os::raw::c_int,
        lineGap: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetFontVMetricsOS2(
        info: *const stbtt_fontinfo,
        typoAscent: *mut ::std::os::raw::c_int,
        typoDescent: *mut ::std::os::raw::c_int,
        typoLineGap: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetFontBoundingBox(
        info: *const stbtt_fontinfo,
        x0: *mut ::std::os::raw::c_int,
        y0: *mut ::std::os::raw::c_int,
        x1: *mut ::std::os::raw::c_int,
        y1: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetCodepointHMetrics(
        info: *const stbtt_fontinfo,
        codepoint: ::std::os::raw::c_int,
        advanceWidth: *mut ::std::os::raw::c_int,
        leftSideBearing: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetCodepointKernAdvance(
        info: *const stbtt_fontinfo,
        ch1: ::std::os::raw::c_int,
        ch2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetCodepointBox(
        info: *const stbtt_fontinfo,
        codepoint: ::std::os::raw::c_int,
        x0: *mut ::std::os::raw::c_int,
        y0: *mut ::std::os::raw::c_int,
        x1: *mut ::std::os::raw::c_int,
        y1: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetGlyphHMetrics(
        info: *const stbtt_fontinfo,
        glyph_index: ::std::os::raw::c_int,
        advanceWidth: *mut ::std::os::raw::c_int,
        leftSideBearing: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetGlyphKernAdvance(
        info: *const stbtt_fontinfo,
        glyph1: ::std::os::raw::c_int,
        glyph2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetGlyphBox(
        info: *const stbtt_fontinfo,
        glyph_index: ::std::os::raw::c_int,
        x0: *mut ::std::os::raw::c_int,
        y0: *mut ::std::os::raw::c_int,
        x1: *mut ::std::os::raw::c_int,
        y1: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_kerningentry {
    pub glyph1: ::std::os::raw::c_int,
    pub glyph2: ::std::os::raw::c_int,
    pub advance: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_stbtt_kerningentry() {
    assert_eq!(
        ::std::mem::size_of::<stbtt_kerningentry>(),
        12usize,
        concat!("Size of: ", stringify!(stbtt_kerningentry))
    );
    assert_eq!(
        ::std::mem::align_of::<stbtt_kerningentry>(),
        4usize,
        concat!("Alignment of ", stringify!(stbtt_kerningentry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_kerningentry>())).glyph1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_kerningentry),
            "::",
            stringify!(glyph1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_kerningentry>())).glyph2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_kerningentry),
            "::",
            stringify!(glyph2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_kerningentry>())).advance as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_kerningentry),
            "::",
            stringify!(advance)
        )
    );
}
extern "C" {
    pub fn stbtt_GetKerningTableLength(info: *const stbtt_fontinfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetKerningTable(
        info: *const stbtt_fontinfo,
        table: *mut stbtt_kerningentry,
        table_length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const STBTT_vmove: _bindgen_ty_1 = 1;
pub const STBTT_vline: _bindgen_ty_1 = 2;
pub const STBTT_vcurve: _bindgen_ty_1 = 3;
pub const STBTT_vcubic: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt_vertex {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub cx: ::std::os::raw::c_short,
    pub cy: ::std::os::raw::c_short,
    pub cx1: ::std::os::raw::c_short,
    pub cy1: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_uchar,
    pub padding: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_stbtt_vertex() {
    assert_eq!(
        ::std::mem::size_of::<stbtt_vertex>(),
        14usize,
        concat!("Size of: ", stringify!(stbtt_vertex))
    );
    assert_eq!(
        ::std::mem::align_of::<stbtt_vertex>(),
        2usize,
        concat!("Alignment of ", stringify!(stbtt_vertex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_vertex>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_vertex),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_vertex>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_vertex),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_vertex>())).cx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_vertex),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_vertex>())).cy as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_vertex),
            "::",
            stringify!(cy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_vertex>())).cx1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_vertex),
            "::",
            stringify!(cx1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_vertex>())).cy1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_vertex),
            "::",
            stringify!(cy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_vertex>())).type_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_vertex),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt_vertex>())).padding as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt_vertex),
            "::",
            stringify!(padding)
        )
    );
}
extern "C" {
    pub fn stbtt_IsGlyphEmpty(
        info: *const stbtt_fontinfo,
        glyph_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetCodepointShape(
        info: *const stbtt_fontinfo,
        unicode_codepoint: ::std::os::raw::c_int,
        vertices: *mut *mut stbtt_vertex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetGlyphShape(
        info: *const stbtt_fontinfo,
        glyph_index: ::std::os::raw::c_int,
        vertices: *mut *mut stbtt_vertex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_FreeShape(info: *const stbtt_fontinfo, vertices: *mut stbtt_vertex);
}
extern "C" {
    pub fn stbtt_GetCodepointSVG(
        info: *const stbtt_fontinfo,
        unicode_codepoint: ::std::os::raw::c_int,
        svg: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetGlyphSVG(
        info: *const stbtt_fontinfo,
        gl: ::std::os::raw::c_int,
        svg: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = ""]
    pub fn stbtt_FreeBitmap(
        bitmap: *mut ::std::os::raw::c_uchar,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn stbtt_GetCodepointBitmap(
        info: *const stbtt_fontinfo,
        scale_x: f32,
        scale_y: f32,
        codepoint: ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        xoff: *mut ::std::os::raw::c_int,
        yoff: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_GetCodepointBitmapSubpixel(
        info: *const stbtt_fontinfo,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        codepoint: ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        xoff: *mut ::std::os::raw::c_int,
        yoff: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_MakeCodepointBitmap(
        info: *const stbtt_fontinfo,
        output: *mut ::std::os::raw::c_uchar,
        out_w: ::std::os::raw::c_int,
        out_h: ::std::os::raw::c_int,
        out_stride: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        codepoint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_MakeCodepointBitmapSubpixel(
        info: *const stbtt_fontinfo,
        output: *mut ::std::os::raw::c_uchar,
        out_w: ::std::os::raw::c_int,
        out_h: ::std::os::raw::c_int,
        out_stride: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        codepoint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_MakeCodepointBitmapSubpixelPrefilter(
        info: *const stbtt_fontinfo,
        output: *mut ::std::os::raw::c_uchar,
        out_w: ::std::os::raw::c_int,
        out_h: ::std::os::raw::c_int,
        out_stride: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        oversample_x: ::std::os::raw::c_int,
        oversample_y: ::std::os::raw::c_int,
        sub_x: *mut f32,
        sub_y: *mut f32,
        codepoint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetCodepointBitmapBox(
        font: *const stbtt_fontinfo,
        codepoint: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        ix0: *mut ::std::os::raw::c_int,
        iy0: *mut ::std::os::raw::c_int,
        ix1: *mut ::std::os::raw::c_int,
        iy1: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetCodepointBitmapBoxSubpixel(
        font: *const stbtt_fontinfo,
        codepoint: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        ix0: *mut ::std::os::raw::c_int,
        iy0: *mut ::std::os::raw::c_int,
        ix1: *mut ::std::os::raw::c_int,
        iy1: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetGlyphBitmap(
        info: *const stbtt_fontinfo,
        scale_x: f32,
        scale_y: f32,
        glyph: ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        xoff: *mut ::std::os::raw::c_int,
        yoff: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_GetGlyphBitmapSubpixel(
        info: *const stbtt_fontinfo,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        glyph: ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        xoff: *mut ::std::os::raw::c_int,
        yoff: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_MakeGlyphBitmap(
        info: *const stbtt_fontinfo,
        output: *mut ::std::os::raw::c_uchar,
        out_w: ::std::os::raw::c_int,
        out_h: ::std::os::raw::c_int,
        out_stride: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        glyph: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_MakeGlyphBitmapSubpixel(
        info: *const stbtt_fontinfo,
        output: *mut ::std::os::raw::c_uchar,
        out_w: ::std::os::raw::c_int,
        out_h: ::std::os::raw::c_int,
        out_stride: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        glyph: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_MakeGlyphBitmapSubpixelPrefilter(
        info: *const stbtt_fontinfo,
        output: *mut ::std::os::raw::c_uchar,
        out_w: ::std::os::raw::c_int,
        out_h: ::std::os::raw::c_int,
        out_stride: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        oversample_x: ::std::os::raw::c_int,
        oversample_y: ::std::os::raw::c_int,
        sub_x: *mut f32,
        sub_y: *mut f32,
        glyph: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetGlyphBitmapBox(
        font: *const stbtt_fontinfo,
        glyph: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        ix0: *mut ::std::os::raw::c_int,
        iy0: *mut ::std::os::raw::c_int,
        ix1: *mut ::std::os::raw::c_int,
        iy1: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stbtt_GetGlyphBitmapBoxSubpixel(
        font: *const stbtt_fontinfo,
        glyph: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        ix0: *mut ::std::os::raw::c_int,
        iy0: *mut ::std::os::raw::c_int,
        ix1: *mut ::std::os::raw::c_int,
        iy1: *mut ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stbtt__bitmap {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub stride: ::std::os::raw::c_int,
    pub pixels: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_stbtt__bitmap() {
    assert_eq!(
        ::std::mem::size_of::<stbtt__bitmap>(),
        24usize,
        concat!("Size of: ", stringify!(stbtt__bitmap))
    );
    assert_eq!(
        ::std::mem::align_of::<stbtt__bitmap>(),
        8usize,
        concat!("Alignment of ", stringify!(stbtt__bitmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt__bitmap>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt__bitmap),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt__bitmap>())).h as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt__bitmap),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt__bitmap>())).stride as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt__bitmap),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stbtt__bitmap>())).pixels as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stbtt__bitmap),
            "::",
            stringify!(pixels)
        )
    );
}
extern "C" {
    pub fn stbtt_Rasterize(
        result: *mut stbtt__bitmap,
        flatness_in_pixels: f32,
        vertices: *mut stbtt_vertex,
        num_verts: ::std::os::raw::c_int,
        scale_x: f32,
        scale_y: f32,
        shift_x: f32,
        shift_y: f32,
        x_off: ::std::os::raw::c_int,
        y_off: ::std::os::raw::c_int,
        invert: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = ""]
    pub fn stbtt_FreeSDF(
        bitmap: *mut ::std::os::raw::c_uchar,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn stbtt_GetGlyphSDF(
        info: *const stbtt_fontinfo,
        scale: f32,
        glyph: ::std::os::raw::c_int,
        padding: ::std::os::raw::c_int,
        onedge_value: ::std::os::raw::c_uchar,
        pixel_dist_scale: f32,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        xoff: *mut ::std::os::raw::c_int,
        yoff: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_GetCodepointSDF(
        info: *const stbtt_fontinfo,
        scale: f32,
        codepoint: ::std::os::raw::c_int,
        padding: ::std::os::raw::c_int,
        onedge_value: ::std::os::raw::c_uchar,
        pixel_dist_scale: f32,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        xoff: *mut ::std::os::raw::c_int,
        yoff: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stbtt_FindMatchingFont(
        fontdata: *const ::std::os::raw::c_uchar,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_CompareUTF8toUTF16_bigendian(
        s1: *const ::std::os::raw::c_char,
        len1: ::std::os::raw::c_int,
        s2: *const ::std::os::raw::c_char,
        len2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbtt_GetFontNameString(
        font: *const stbtt_fontinfo,
        length: *mut ::std::os::raw::c_int,
        platformID: ::std::os::raw::c_int,
        encodingID: ::std::os::raw::c_int,
        languageID: ::std::os::raw::c_int,
        nameID: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
pub const STBTT_PLATFORM_ID_UNICODE: _bindgen_ty_2 = 0;
pub const STBTT_PLATFORM_ID_MAC: _bindgen_ty_2 = 1;
pub const STBTT_PLATFORM_ID_ISO: _bindgen_ty_2 = 2;
pub const STBTT_PLATFORM_ID_MICROSOFT: _bindgen_ty_2 = 3;
pub type _bindgen_ty_2 = i32;
pub const STBTT_UNICODE_EID_UNICODE_1_0: _bindgen_ty_3 = 0;
pub const STBTT_UNICODE_EID_UNICODE_1_1: _bindgen_ty_3 = 1;
pub const STBTT_UNICODE_EID_ISO_10646: _bindgen_ty_3 = 2;
pub const STBTT_UNICODE_EID_UNICODE_2_0_BMP: _bindgen_ty_3 = 3;
pub const STBTT_UNICODE_EID_UNICODE_2_0_FULL: _bindgen_ty_3 = 4;
pub type _bindgen_ty_3 = i32;
pub const STBTT_MS_EID_SYMBOL: _bindgen_ty_4 = 0;
pub const STBTT_MS_EID_UNICODE_BMP: _bindgen_ty_4 = 1;
pub const STBTT_MS_EID_SHIFTJIS: _bindgen_ty_4 = 2;
pub const STBTT_MS_EID_UNICODE_FULL: _bindgen_ty_4 = 10;
pub type _bindgen_ty_4 = i32;
pub const STBTT_MAC_EID_ROMAN: _bindgen_ty_5 = 0;
pub const STBTT_MAC_EID_ARABIC: _bindgen_ty_5 = 4;
pub const STBTT_MAC_EID_JAPANESE: _bindgen_ty_5 = 1;
pub const STBTT_MAC_EID_HEBREW: _bindgen_ty_5 = 5;
pub const STBTT_MAC_EID_CHINESE_TRAD: _bindgen_ty_5 = 2;
pub const STBTT_MAC_EID_GREEK: _bindgen_ty_5 = 6;
pub const STBTT_MAC_EID_KOREAN: _bindgen_ty_5 = 3;
pub const STBTT_MAC_EID_RUSSIAN: _bindgen_ty_5 = 7;
pub type _bindgen_ty_5 = i32;
pub const STBTT_MS_LANG_ENGLISH: _bindgen_ty_6 = 1033;
pub const STBTT_MS_LANG_ITALIAN: _bindgen_ty_6 = 1040;
pub const STBTT_MS_LANG_CHINESE: _bindgen_ty_6 = 2052;
pub const STBTT_MS_LANG_JAPANESE: _bindgen_ty_6 = 1041;
pub const STBTT_MS_LANG_DUTCH: _bindgen_ty_6 = 1043;
pub const STBTT_MS_LANG_KOREAN: _bindgen_ty_6 = 1042;
pub const STBTT_MS_LANG_FRENCH: _bindgen_ty_6 = 1036;
pub const STBTT_MS_LANG_RUSSIAN: _bindgen_ty_6 = 1049;
pub const STBTT_MS_LANG_GERMAN: _bindgen_ty_6 = 1031;
pub const STBTT_MS_LANG_SPANISH: _bindgen_ty_6 = 1033;
pub const STBTT_MS_LANG_HEBREW: _bindgen_ty_6 = 1037;
pub const STBTT_MS_LANG_SWEDISH: _bindgen_ty_6 = 1053;
pub type _bindgen_ty_6 = i32;
pub const STBTT_MAC_LANG_ENGLISH: _bindgen_ty_7 = 0;
pub const STBTT_MAC_LANG_JAPANESE: _bindgen_ty_7 = 11;
pub const STBTT_MAC_LANG_ARABIC: _bindgen_ty_7 = 12;
pub const STBTT_MAC_LANG_KOREAN: _bindgen_ty_7 = 23;
pub const STBTT_MAC_LANG_DUTCH: _bindgen_ty_7 = 4;
pub const STBTT_MAC_LANG_RUSSIAN: _bindgen_ty_7 = 32;
pub const STBTT_MAC_LANG_FRENCH: _bindgen_ty_7 = 1;
pub const STBTT_MAC_LANG_SPANISH: _bindgen_ty_7 = 6;
pub const STBTT_MAC_LANG_GERMAN: _bindgen_ty_7 = 2;
pub const STBTT_MAC_LANG_SWEDISH: _bindgen_ty_7 = 5;
pub const STBTT_MAC_LANG_HEBREW: _bindgen_ty_7 = 10;
pub const STBTT_MAC_LANG_CHINESE_SIMPLIFIED: _bindgen_ty_7 = 33;
pub const STBTT_MAC_LANG_ITALIAN: _bindgen_ty_7 = 3;
pub const STBTT_MAC_LANG_CHINESE_TRAD: _bindgen_ty_7 = 19;
pub type _bindgen_ty_7 = i32;
